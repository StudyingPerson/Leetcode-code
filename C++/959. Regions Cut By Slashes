class Solution {
public:

    void dfs(int x, int y, vector<vector<int>>& matrix, int n){
        if(x < 0 || x >= n * 3 || y < 0 || y >= n * 3 || matrix[x][y])
            return;
        matrix[x][y] = 1;
        dfs(x-1, y, matrix, n);
        dfs(x+1, y, matrix, n);
        dfs(x, y-1, matrix, n);
        dfs(x, y+1, matrix, n);
    }
    int regionsBySlashes(vector<string>& grid) {
        
        int n = grid.size();
        vector<vector<int>>matrix(n * 3, vector<int>(n * 3, 0));

        

        for(int i = 0;i < n;i++){
            for(int j = 0;j < n;j++){
                if(grid[i][j] == '\\'){
                    matrix[i*3][j*3] = 1;
                    matrix[i*3+1][j*3+1] = 1;
                    matrix[i*3+2][j*3+2] = 1;
                }
                else if(grid[i][j] == '/'){
                    matrix[i*3+2][j*3] = 1;
                    matrix[i*3+1][j*3+1] = 1;
                    matrix[i*3][j*3+2] = 1;
                }
            }
        }

        int ans = 0;
        for(int i = 0;i < n * 3;i++){
            for(int j = 0;j < n * 3;j++){
                if(!matrix[i][j]){
                    dfs(i,j, matrix, n);
                    ans++;
                }
            }
        }
        return ans;
    }
};
