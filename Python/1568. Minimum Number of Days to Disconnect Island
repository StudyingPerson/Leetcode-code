class Solution:
    def minDays(self, grid: List[List[int]]) -> int:

        rows, cols = len(grid), len(grid[0])
       
        def isSeparate():
            s = []
            for y in range(rows):
                for x in range(cols):
                    if grid[y][x]:
                        s = [y, x]
                        break

            if not len(s):
                return True

            def bfs(y, x):
                if y < 0 or y >= rows or x < 0 or x >= cols or not matrix[y][x]:
                    return
                matrix[y][x] = 0
                bfs(y-1,x)
                bfs(y+1,x)
                bfs(y,x-1)
                bfs(y,x+1)

            matrix = deepcopy(grid)
            bfs(s[0],s[1])
        
            for m in matrix:
                if sum(m):
                    return True
            return False

        #case 0
        if isSeparate():
            return 0

        #case 1
        for y in range(rows):
            for x in range(cols):
                if grid[y][x]:
                    grid[y][x] = 0
                    if isSeparate():
                        return 1
                    grid[y][x] = 1

        #case 2
        return 2
